// Code generated by MockGen. DO NOT EDIT.
// Source: ./apis.go

// Package mock_traffic_service is a generated GoMock package.
package mock_traffic_service

import (
	reflect "reflect"
	time "time"
	app "where-do-i-sit/internal/app"

	gomock "github.com/golang/mock/gomock"
)

// MockTrafficServiceAPI is a mock of TrafficServiceAPI interface.
type MockTrafficServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficServiceAPIMockRecorder
}

// MockTrafficServiceAPIMockRecorder is the mock recorder for MockTrafficServiceAPI.
type MockTrafficServiceAPIMockRecorder struct {
	mock *MockTrafficServiceAPI
}

// NewMockTrafficServiceAPI creates a new mock instance.
func NewMockTrafficServiceAPI(ctrl *gomock.Controller) *MockTrafficServiceAPI {
	mock := &MockTrafficServiceAPI{ctrl: ctrl}
	mock.recorder = &MockTrafficServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficServiceAPI) EXPECT() *MockTrafficServiceAPIMockRecorder {
	return m.recorder
}

// GetRealtimeCongestion mocks base method.
func (m *MockTrafficServiceAPI) GetRealtimeCongestion(stationCode, prevStationCode string) (app.Congestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealtimeCongestion", stationCode, prevStationCode)
	ret0, _ := ret[0].(app.Congestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealtimeCongestion indicates an expected call of GetRealtimeCongestion.
func (mr *MockTrafficServiceAPIMockRecorder) GetRealtimeCongestion(stationCode, prevStationCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealtimeCongestion", reflect.TypeOf((*MockTrafficServiceAPI)(nil).GetRealtimeCongestion), stationCode, prevStationCode)
}

// GetStationByName mocks base method.
func (m *MockTrafficServiceAPI) GetStationByName(arg0, arg1 string) (app.Station, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationByName", arg0, arg1)
	ret0, _ := ret[0].(app.Station)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationByName indicates an expected call of GetStationByName.
func (mr *MockTrafficServiceAPIMockRecorder) GetStationByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationByName", reflect.TypeOf((*MockTrafficServiceAPI)(nil).GetStationByName), arg0, arg1)
}

// GetStations mocks base method.
func (m *MockTrafficServiceAPI) GetStations() (app.Stations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStations")
	ret0, _ := ret[0].(app.Stations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStations indicates an expected call of GetStations.
func (mr *MockTrafficServiceAPIMockRecorder) GetStations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStations", reflect.TypeOf((*MockTrafficServiceAPI)(nil).GetStations))
}

// GetStatisticCongestion mocks base method.
func (m *MockTrafficServiceAPI) GetStatisticCongestion(stationCode, prevStationCode string, time time.Time) ([]app.Congestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticCongestion", stationCode, prevStationCode, time)
	ret0, _ := ret[0].([]app.Congestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticCongestion indicates an expected call of GetStatisticCongestion.
func (mr *MockTrafficServiceAPIMockRecorder) GetStatisticCongestion(stationCode, prevStationCode, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticCongestion", reflect.TypeOf((*MockTrafficServiceAPI)(nil).GetStatisticCongestion), stationCode, prevStationCode, time)
}
